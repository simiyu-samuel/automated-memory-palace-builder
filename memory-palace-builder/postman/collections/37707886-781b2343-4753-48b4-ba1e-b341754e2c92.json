{
	"info": {
		"_postman_id": "37707886-781b2343-4753-48b4-ba1e-b341754e2c92",
		"name": "Memory Palace - Personal 3D Memory Management System",
		"description": "StartFragment\n\n# Memory Palace - Your Digital Life in 3D Space\n\n**Stop drowning in digital chaos. Start exploring your memories.**\n\nLike most people, I was losing important memories in the endless scroll of emails, photos, and calendar events. Instead of building another folder system, I created something revolutionary: **Memory Palace** - an automated 3D world that transforms your digital life into an explorable, spatial experience.\n\n## What Makes This Different\n\n**Zero-effort setup meets intelligent organization.** Connect your Gmail and Calendar, and watch as your digital memories automatically materialize as interactive 3D objects in a personalized virtual space.\n\n### Features:\n\n- **Fully Automated** - No manual room creation or object placement required\n- **Real Data Integration** - Your actual emails become explorable 3D objects\n- **Real-Time Sync** - New memories instantly appear in your palace\n- **MCP Server Integration** - 3 custom tools for intelligent memory processing\n- **AI-Powered Insights** - Discover hidden patterns in your digital behavior\n\n## The Problem Solved\n\n**Before:** Endless scrolling through Gmail threads, forgotten photos, lost meeting notes **After:** Spatial navigation where work emails appear as cubes in your \"Professional Zone\" and family photos float in your \"Personal Gallery\" - everything positioned based on context, date, and relationships.\n\n## Technical Innovation\n\n**Automated 3D Pipeline:**\n\n```\nAPI Data ‚Üí MCP Processing ‚Üí Laravel Backend ‚Üí Three.js Rendering\n ```\n\n- **Smart Positioning Algorithm** - Prevents overlaps, creates meaningful spatial relationships\n- **Production Architecture** - Laravel + PostgreSQL + OAuth + Queue Jobs\n- **Modern Frontend** - React.js + Three.js for smooth 3D interactions\n- **MCP Tools** - `collect_memories`, `search_memories`, `create_memory_object`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Get CSRF Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract CSRF token from response",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.csrf_token) {",
									"        pm.globals.set('csrf_token', responseJson.csrf_token);",
									"        console.log('‚úÖ CSRF token saved:', responseJson.csrf_token);",
									"    }",
									"} else {",
									"    console.log('‚ùå Failed to get CSRF token. Status:', pm.response.code);",
									"    console.log('Response:', pm.response.text());",
									"}",
									"",
									"pm.test('CSRF token retrieved successfully', function () {",
									"    if (pm.response.code === 200) {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.csrf_token).to.exist;",
									"    } else {",
									"        pm.expect.fail('CSRF endpoint may not be configured. Check Laravel routes.');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"id": "eb03b066-061a-4342-bfd1-89951540e0ba"
							}
						}
					],
					"id": "37707886-bdef3c0a-a952-4857-a87b-7dbc51f1c0f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/csrf-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"csrf-token"
							]
						},
						"description": "Get CSRF token for subsequent authenticated requests. This token is automatically saved and used in other requests."
					},
					"response": []
				},
				{
					"name": "Get CSRF Token (Alternative - Sanctum)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Alternative method - extract from cookies",
									"if (pm.response.code === 200) {",
									"    // Look for XSRF-TOKEN in cookies",
									"    const xsrfCookie = pm.cookies.get('XSRF-TOKEN');",
									"    if (xsrfCookie) {",
									"        // Decode URL-encoded cookie",
									"        const decodedToken = decodeURIComponent(xsrfCookie);",
									"        pm.globals.set('csrf_token', decodedToken);",
									"        console.log('‚úÖ CSRF token from cookie saved');",
									"    } else {",
									"        console.log('‚ö†Ô∏è No XSRF-TOKEN cookie found');",
									"    }",
									"}",
									"",
									"pm.test('Sanctum CSRF cookie endpoint accessible', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "494a0698-f462-4b07-8f90-53df5fb7d2f9"
							}
						}
					],
					"id": "37707886-b98e0172-c6e8-4b11-b169-07014b344529",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{base_url}}/sanctum/csrf-cookie",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sanctum",
								"csrf-cookie"
							]
						},
						"description": "Alternative CSRF token method using Laravel Sanctum's built-in endpoint. This sets CSRF token in cookies."
					},
					"response": []
				},
				{
					"name": "Login (API)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Handle different response scenarios",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Save access token",
									"    if (responseJson.access_token) {",
									"        pm.globals.set('auth_token', responseJson.access_token);",
									"        console.log('‚úÖ Access token saved');",
									"    }",
									"    ",
									"    // Save user info",
									"    if (responseJson.user) {",
									"        pm.globals.set('user_id', responseJson.user.id.toString());",
									"        pm.globals.set('user_email', responseJson.user.email);",
									"        console.log('‚úÖ User info saved:', responseJson.user.email);",
									"    }",
									"    ",
									"    // Save token type",
									"    if (responseJson.token_type) {",
									"        pm.globals.set('token_type', responseJson.token_type);",
									"    }",
									"} else if (pm.response.code === 422) {",
									"    console.log('‚ùå Validation error - check email/password');",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.errors) {",
									"        console.log('Errors:', JSON.stringify(responseJson.errors, null, 2));",
									"    }",
									"} else {",
									"    console.log('‚ùå Login failed. Status:', pm.response.code);",
									"    console.log('Response:', pm.response.text());",
									"}",
									"",
									"pm.test('Login successful', function () {",
									"    if (pm.response.code === 200) {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.access_token).to.exist;",
									"        pm.expect(responseJson.user).to.exist;",
									"    } else if (pm.response.code === 422) {",
									"        pm.expect.fail('Validation failed. Check login credentials in collection variables.');",
									"    } else {",
									"        pm.expect.fail('Login failed with status: ' + pm.response.code + '. Make sure API routes are configured.');",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('User data is valid', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.user.email).to.exist;",
									"        pm.expect(responseJson.user.id).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "a24a10d2-e058-4f2b-a65c-632d439ef8bb"
							}
						}
					],
					"id": "37707886-49337d50-6e9b-4a7e-bf67-4921220d249c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{login_email}}\",\n    \"password\": \"{{login_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"login"
							]
						},
						"description": "API login endpoint using Laravel Sanctum tokens. No CSRF protection needed.\n\n**Requirements:**\n- API AuthController must be created\n- Routes in routes/api.php\n- Laravel Sanctum installed\n\n**Response includes:**\n- access_token: Bearer token for API requests\n- user: User information\n- token_type: 'Bearer'"
					},
					"response": []
				},
				{
					"name": "Register (API)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Handle registration response",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Save access token if provided",
									"    if (responseJson.access_token) {",
									"        pm.globals.set('auth_token', responseJson.access_token);",
									"        console.log('‚úÖ Registration successful, token saved');",
									"    }",
									"    ",
									"    // Save user info",
									"    if (responseJson.user) {",
									"        pm.globals.set('user_id', responseJson.user.id.toString());",
									"        pm.globals.set('user_email', responseJson.user.email);",
									"        console.log('‚úÖ User registered:', responseJson.user.email);",
									"    }",
									"} else if (pm.response.code === 422) {",
									"    console.log('‚ùå Validation error during registration');",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.errors) {",
									"        console.log('Errors:', JSON.stringify(responseJson.errors, null, 2));",
									"    }",
									"} else {",
									"    console.log('‚ùå Registration failed. Status:', pm.response.code);",
									"    console.log('Response:', pm.response.text());",
									"}",
									"",
									"pm.test('Registration successful', function () {",
									"    if (pm.response.code === 201) {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson.access_token).to.exist;",
									"        pm.expect(responseJson.user).to.exist;",
									"    } else if (pm.response.code === 422) {",
									"        pm.expect.fail('Registration validation failed. Check email uniqueness and password requirements.');",
									"    } else {",
									"        pm.expect.fail('Registration failed with status: ' + pm.response.code);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"id": "5ce3d024-9b1e-492f-9a2f-83e8739af777"
							}
						}
					],
					"id": "37707886-2d8f8548-1744-4036-b836-98707952c613",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{register_name}}\",\n    \"email\": \"{{register_email}}\",\n    \"password\": \"{{register_password}}\",\n    \"password_confirmation\": \"{{register_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"register"
							]
						},
						"description": "API registration endpoint using Laravel Sanctum tokens. No CSRF protection needed.\n\n**Requirements:**\n- Password minimum 8 characters\n- Email must be unique\n- password_confirmation must match password\n\n**Response includes:**\n- access_token: Bearer token for immediate API access\n- user: Created user information"
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"id": "37707886-1a5cd745-fc78-4636-92a5-50acd740827b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"user"
							]
						},
						"description": "Get current authenticated user profile information. Use this to verify authentication is working."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save new token if refresh successful",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.access_token) {",
									"        pm.globals.set('auth_token', responseJson.access_token);",
									"        console.log('‚úÖ Token refreshed successfully');",
									"    }",
									"}",
									"",
									"pm.test('Token refresh successful', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a840dbf8-e137-47cc-8011-507757b13bb7"
							}
						}
					],
					"id": "37707886-0ddc0a79-d69c-41a0-a3c3-a8117ee25f47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"refresh"
							]
						},
						"description": "Refresh the current access token to extend session."
					},
					"response": []
				},
				{
					"name": "Logout",
					"id": "37707886-4e5e6bc6-7cce-45e1-8a2a-87659153dcb6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"logout"
							]
						},
						"description": "Logout current user and invalidate access token."
					},
					"response": []
				}
			],
			"id": "37707886-417b7b5d-360a-46d2-9c13-5098e91698b6",
			"description": "Authentication endpoints for secure access to Memory Palace API"
		},
		{
			"name": "üöÄ Getting Started",
			"item": [
				{
					"name": "Health Check",
					"id": "37707886-a193ded3-d864-4abb-b53d-ebbab3efb9b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"health"
							]
						},
						"description": "Verify that the Memory Palace API is running and responsive"
					},
					"response": []
				},
				{
					"name": "Get Palace Overview",
					"id": "37707886-9a9a02dc-7ee2-4b83-abff-4b8665b27454",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/palace/overview?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"palace",
								"overview"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}",
									"description": "User ID for palace data"
								}
							]
						},
						"description": "Get a complete overview of your memory palace including room count, memory statistics, and recent activity"
					},
					"response": []
				}
			],
			"id": "37707886-27f7b08d-7b54-429d-bf16-ef6729cda9da",
			"description": "Essential endpoints to get your Memory Palace up and running"
		},
		{
			"name": "ü§ñ MCP Server Integration",
			"item": [
				{
					"name": "MCP - Sync All Connections",
					"id": "37707886-f5020d6b-60e6-4f2d-ab68-00a13dd8d0b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"provider\": \"gmail\",\n  \"max_results\": 50,\n  \"include_attachments\": true,\n  \"date_range\": \"7d\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/sync-all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"sync-all"
							]
						},
						"description": "**MCP Tool: syncViaMP**\n\nAutomatically gather memories from all connected services using MCP server integration.\n\n**What happens automatically:**\n1. Fetches data from all active connections\n2. AI analyzes sentiment and content via MCP\n3. Assigns memories to appropriate palace rooms\n4. Generates 3D object specifications\n5. Creates spatial positioning"
					},
					"response": []
				},
				{
					"name": "MCP - Sync Single Connection",
					"id": "37707886-39b2f2c1-4897-4f29-bc07-7dfd18a6b084",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"provider\": \"gmail\",\n  \"max_results\": 25\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/connections/{{connection_id}}/sync",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"connections",
								"{{connection_id}}",
								"sync"
							]
						},
						"description": "Sync a specific API connection using MCP server for intelligent processing."
					},
					"response": []
				},
				{
					"name": "MCP - Search Memories",
					"id": "37707886-91038ae5-25da-4b05-93ed-b732db483353",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"project meeting\",\n  \"sentiment\": \"positive\",\n  \"type\": \"email\",\n  \"max_results\": 20\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/search-mcp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"search-mcp"
							]
						},
						"description": "**MCP Tool: searchViaMP**\n\nIntelligent search across all memories using MCP server with AI-powered filtering and relevance scoring.\n\n**Search capabilities:**\n- Full-text search across all memory content\n- Sentiment-based filtering\n- Type-specific searches\n- AI-powered relevance ranking"
					},
					"response": []
				},
				{
					"name": "Simple Gmail Sync (Production)",
					"id": "37707886-6e6b762b-a3f8-476e-83bb-f7ef590963e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/simple-sync/{{connection_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"simple-sync",
								"{{connection_id}}"
							]
						},
						"description": "**Production Gmail Sync**\n\nDirect Gmail data sync using real OAuth tokens. This endpoint:\n1. Validates active Gmail connection\n2. Fetches real Gmail data using access tokens\n3. Processes emails through MemoryCollectionService\n4. Returns actual import statistics"
					},
					"response": []
				}
			],
			"id": "37707886-4fcd0334-7fcb-4e74-a603-f7008be83e1b",
			"description": "Endpoints that demonstrate MCP (Model Context Protocol) server capabilities"
		},
		{
			"name": "üìß Memory Collection & Processing",
			"item": [
				{
					"name": "Create API Connection",
					"id": "37707886-db6345c3-9e93-4d0c-b81d-7b1181d2fae4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"provider\": \"gmail\",\n  \"email\": \"your.email@gmail.com\",\n  \"account_name\": \"My Gmail Account\",\n  \"scopes\": [\"https://www.googleapis.com/auth/gmail.readonly\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/connections",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"connections"
							]
						},
						"description": "Create a new API connection for automated memory collection. The system will:\n\n1. **Create connection record** with your provider details\n2. **Generate OAuth URL** for secure authorization\n3. **Return authorization link** to complete setup\n4. **Enable auto-sync** once authorized\n\n**Supported providers**: gmail, google_calendar, google_photos, spotify, location_services"
					},
					"response": []
				},
				{
					"name": "Update API Connection",
					"id": "37707886-23ed0a91-6a17-4d2c-9f0e-86e1dd75cd76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"updated.email@gmail.com\",\n  \"account_name\": \"Updated Account Name\",\n  \"scopes\": [\"https://www.googleapis.com/auth/gmail.readonly\", \"https://www.googleapis.com/auth/gmail.metadata\"],\n  \"sync_frequency\": \"hourly\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/connections/{{connection_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"connections",
								"{{connection_id}}"
							]
						},
						"description": "Update an existing API connection's settings and metadata."
					},
					"response": []
				},
				{
					"name": "Delete API Connection",
					"id": "37707886-adb99c96-ccac-414a-a8aa-32e60289d9e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/connections/{{connection_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"connections",
								"{{connection_id}}"
							]
						},
						"description": "Remove an API connection and stop syncing data from that provider."
					},
					"response": []
				},
				{
					"name": "Refresh Connection Token",
					"id": "37707886-08ffa4d9-8821-4aca-8cd9-3dd0692d6fa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/connections/{{connection_id}}/refresh-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"connections",
								"{{connection_id}}",
								"refresh-token"
							]
						},
						"description": "Refresh OAuth tokens for a connection to maintain access to external APIs."
					},
					"response": []
				}
			],
			"id": "37707886-33cc5ba7-e253-4d2a-8fe6-e6651ea9f145",
			"description": "Automated memory collection from various data sources"
		},
		{
			"name": "üè∞ 3D Palace Management",
			"item": [
				{
					"name": "Get Palace Rooms",
					"id": "37707886-544a7384-029a-4b46-b500-4ff37a3a52a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/palace-rooms?user_id={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"palace-rooms"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								},
								{
									"key": "name",
									"value": "",
									"description": "Filter by room name",
									"disabled": true
								}
							]
						},
						"description": "Get all palace rooms for a user with their configuration data.\n\n**Response includes:**\n- Room themes and moods\n- Color schemes and positioning\n- Lighting configuration\n- Dimensions and connections\n- Active status"
					},
					"response": []
				},
				{
					"name": "Create Palace Room",
					"id": "37707886-825d47d8-b016-4c59-a84a-794d159990b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": {{user_id}},\n  \"name\": \"Creative Space\",\n  \"description\": \"Room for creative memories and artistic content\",\n  \"theme\": \"artistic\",\n  \"mood\": \"inspiring\",\n  \"color_scheme\": [\"#ff6b6b\", \"#4ecdc4\", \"#45b7d1\"],\n  \"position\": {\"x\": 0, \"y\": 0, \"z\": -20},\n  \"dimensions\": {\"width\": 15, \"height\": 10, \"depth\": 15},\n  \"lighting\": {\"ambient\": 0.4, \"directional\": 0.8, \"color\": \"#ffd700\"},\n  \"connections\": [],\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/palace-rooms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"palace-rooms"
							]
						},
						"description": "Create a new themed room in your memory palace with custom configuration."
					},
					"response": []
				},
				{
					"name": "Get Memory Objects (Authenticated)",
					"id": "37707886-25935ee5-8121-4897-98f4-0131f4da3a84",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memory-objects?room_id={{room_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memory-objects"
							],
							"query": [
								{
									"key": "room_id",
									"value": "{{room_id}}",
									"description": "Filter by specific palace room"
								}
							]
						},
						"description": "Retrieve all 3D memory objects with their complete spatial positioning and rendering data.\n\n**Response includes:**\n- 3D coordinates and transformations\n- Object geometry and materials\n- Animation parameters\n- Interaction behaviors\n- Associated memory data"
					},
					"response": []
				},
				{
					"name": "Create Memory Object",
					"id": "37707886-25b98452-1d72-4ee5-9b4a-7b5cd95a5f33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"memory_id\": 1,\n  \"palace_room_id\": 1,\n  \"object_type\": \"email\",\n  \"title\": \"Important Project Email\",\n  \"description\": \"Email about Q4 project deliverables\",\n  \"position\": {\"x\": 2.5, \"y\": 1.5, \"z\": -1.2},\n  \"rotation\": {\"x\": 0, \"y\": 0, \"z\": 0},\n  \"scale\": {\"x\": 1.0, \"y\": 1.0, \"z\": 1.0},\n  \"color\": [\"#10b981\", \"#065f46\", \"#047857\"],\n  \"importance_score\": 0.8,\n  \"is_visible\": true,\n  \"is_interactive\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memory-objects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memory-objects"
							]
						},
						"description": "Create a 3D object representation of a memory with detailed spatial and visual configuration."
					},
					"response": []
				}
			],
			"id": "37707886-25af49f8-36af-4641-8fcf-d161d172ac65",
			"description": "Manage your 3D memory palace structure and objects"
		},
		{
			"name": "üîç Memory Search & Analytics",
			"item": [
				{
					"name": "Advanced Memory Search (Web)",
					"id": "37707886-5b944a48-dd0f-48d2-b5f2-819e2b019d9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"q\": \"project meeting\",\n  \"type\": \"email\",\n  \"sentiment\": \"positive\",\n  \"room_id\": 1,\n  \"tags\": [\"work\", \"important\"],\n  \"date_from\": \"2024-01-01\",\n  \"date_to\": \"2024-12-31\",\n  \"is_favorite\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memories/search",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memories",
								"search"
							]
						},
						"description": "**Advanced Memory Search**\n\nPowerful search with multiple filtering options and pagination.\n\n**Search features:**\n- **Full-text search** across title, content, description\n- **Multi-dimensional filtering** by type, sentiment, room, tags\n- **Date range queries** for temporal filtering\n- **Favorite memories** filtering\n- **Paginated results** (20 per page)\n- **Sorted by memory date** (newest first)"
					},
					"response": []
				},
				{
					"name": "Advanced Memory Search",
					"id": "37707886-6a7e049a-944a-41f7-bcd4-80f99c56b980",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memories?search=important project&type=email&sentiment=positive&room=Work Space&limit=20&sort_by=relevance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memories"
							],
							"query": [
								{
									"key": "search",
									"value": "important project",
									"description": "Full-text search query"
								},
								{
									"key": "type",
									"value": "email",
									"description": "Memory type filter"
								},
								{
									"key": "sentiment",
									"value": "positive",
									"description": "AI sentiment filter"
								},
								{
									"key": "room",
									"value": "Work Space",
									"description": "Palace room filter"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Results per page"
								},
								{
									"key": "sort_by",
									"value": "relevance",
									"description": "Sort order: relevance, date, importance"
								}
							]
						},
						"description": "Powerful search across all memories with multiple filtering options and AI-powered relevance ranking.\n\n**Search features:**\n- **Full-text indexing** of all memory content\n- **AI-powered relevance** scoring\n- **Multi-dimensional filtering** by type, sentiment, room, date\n- **Fuzzy matching** for typos and variations"
					},
					"response": []
				},
				{
					"name": "Get Memory Statistics",
					"id": "37707886-3b615bed-5131-47e4-8893-6208437be928",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memories/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memories",
								"stats"
							]
						},
						"description": "Get comprehensive statistics about your memory collection.\n\n**Statistics include:**\n- Total memory count by type\n- Sentiment analysis breakdown\n- Room distribution\n- Recent activity trends\n- Import statistics by provider"
					},
					"response": []
				},
				{
					"name": "Get Memories for 3D Rendering",
					"id": "37707886-c4ae159c-e9cd-4190-b886-b8f87d355f5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memories/for-3d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memories",
								"for-3d"
							]
						},
						"description": "Get processed memories optimized for 3D palace rendering with spatial data."
					},
					"response": []
				},
				{
					"name": "Find Related Memories",
					"id": "37707886-ebe4106e-dc5d-4e30-8432-98d957a78cd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memories/{{memory_id}}/related",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memories",
								"{{memory_id}}",
								"related"
							]
						},
						"description": "Discover AI-powered connections between memories across different platforms and time periods.\n\n**Connection types:**\n- **Semantic**: Similar topics, keywords, content themes\n- **Temporal**: Memories from same time periods\n- **Personal**: Same people, locations, or contexts\n- **Causal**: Events that led to other events"
					},
					"response": []
				}
			],
			"id": "37707886-a004c615-c8a6-470f-9687-f3c2b20176f0",
			"description": "Advanced search and analytics for your memory data"
		},
		{
			"name": "‚öôÔ∏è API Configuration & Management",
			"item": [
				{
					"name": "Get User Connections (No Auth)",
					"id": "37707886-2a23856b-cd94-4468-b95e-9fec06bf115d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/users/{{user_id}}/connections",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"users",
								"{{user_id}}",
								"connections"
							]
						},
						"description": "**MCP Server Endpoint** - Get user connections without authentication for MCP server use.\n\nView all connected services and their sync status.\n\n**Supported integrations:**\n- Gmail (email memories)\n- Google Calendar (event memories)\n- Google Photos (photo memories)\n- Spotify (music memories)\n- Location Services (place memories)"
					},
					"response": []
				},
				{
					"name": "Get Processing Logs",
					"id": "37707886-15f447c3-95f1-4581-bbef-38d856f98407",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/processing-logs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"processing-logs"
							]
						},
						"description": "View recent processing logs for monitoring sync jobs and data collection activities.\n\n**Log information:**\n- Job type and status\n- Processing time metrics\n- Error messages and debugging info\n- Recent 50 entries"
					},
					"response": []
				},
				{
					"name": "Get User Insights",
					"id": "37707886-17bc5308-a5cd-4c5d-9a40-35e31a327aab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/insights",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"insights"
							]
						},
						"description": "Get AI-generated insights about your digital life patterns and memory trends.\n\n**Insights include:**\n- Behavioral patterns\n- Communication trends\n- Memory importance scoring\n- Relationship mapping\n- Activity recommendations"
					},
					"response": []
				},
				{
					"name": "Trigger Manual Memory Collection",
					"id": "37707886-b4829afe-fb1e-4af3-be40-e31dd2e3f2c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"provider\": \"gmail\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/collect-memories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"collect-memories"
							]
						},
						"description": "Manually trigger memory collection from all or specific providers using background jobs.\n\n**Process:**\n1. Dispatches CollectMemoriesJob for active connections\n2. Jobs run in background queue\n3. AI processes and categorizes new memories\n4. 3D objects generated automatically\n5. Palace updated in real-time"
					},
					"response": []
				}
			],
			"id": "37707886-b4d9be2e-b622-4a93-868f-f1c112b13178",
			"description": "Manage API connections, settings, and system configuration"
		},
		{
			"name": "üéÆ Interactive Features Demo",
			"item": [
				{
					"name": "Health Check",
					"id": "37707886-f585634d-49e1-4c77-ae46-82e0b79f693a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"health"
							]
						},
						"description": "**System Health Check**\n\nVerify that all Memory Palace services are running properly.\n\n**Health indicators:**\n- Database connectivity\n- Cache system status\n- Queue system status\n- API version information\n- Current timestamp"
					},
					"response": []
				},
				{
					"name": "API Test Endpoint",
					"id": "37707886-9c369fe4-e7a6-4cdc-bf38-dd1196bd0f88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"test"
							]
						},
						"description": "Test API connectivity and authentication status."
					},
					"response": []
				},
				{
					"name": "Real-time Palace Updates",
					"id": "37707886-84fd66a1-7e5e-473c-b504-c630fd55e4d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-CSRF-TOKEN",
								"value": "{{csrf_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/palace/updates?since={{timestamp}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"palace",
								"updates"
							],
							"query": [
								{
									"key": "since",
									"value": "{{timestamp}}",
									"description": "ISO timestamp of last update check"
								}
							]
						},
						"description": "**Real-time Palace Synchronization**\n\nGet real-time updates for the 3D palace to synchronize new memories and object changes.\n\n**Update types:**\n- **New memories**: Recently imported from APIs\n- **Room assignments**: AI-determined palace room placement\n- **3D object data**: Position, geometry, materials\n- **Memory metadata**: Title, type, sentiment, dates\n\n**Perfect for:**\n- Live palace rendering updates\n- Real-time memory notifications\n- Dynamic 3D scene synchronization"
					},
					"response": []
				},
				{
					"name": "Create Memory (No Auth - MCP)",
					"id": "37707886-1e8310a9-b7a2-48a5-839f-f1b2e882476e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{demo_content}}\",\n  \"content\": \"Sample memory content with important details about the project meeting\",\n  \"type\": \"email\",\n  \"user_id\": {{user_id}},\n  \"api_connection_id\": 1,\n  \"source_data\": {\n    \"message_id\": \"msg_123\",\n    \"from\": \"colleague@company.com\",\n    \"subject\": \"{{demo_content}}\"\n  },\n  \"memory_date\": \"2024-12-15T10:30:00Z\",\n  \"sentiment\": \"positive\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/memories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"{{api_version}}",
								"memories"
							]
						},
						"description": "**MCP Server Endpoint** - Create memories directly without authentication for MCP server integration.\n\nThis endpoint allows the MCP server to create processed memories with:\n- AI-determined sentiment analysis\n- Automatic type classification\n- Source platform integration\n- Metadata preservation"
					},
					"response": []
				}
			],
			"id": "37707886-134d2919-80f9-4da8-941c-dc6a41bc4658",
			"description": "Showcase the unique interactive capabilities of the Memory Palace"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f0fa4352-7023-4f3b-b2fe-6173cc1fd5d4",
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Auto-fetch CSRF token if not available",
					"if (!pm.globals.get('csrf_token') || pm.globals.get('csrf_token') === '') {",
					"    console.log('üîÑ CSRF token not found, fetching...');",
					"    pm.sendRequest({",
					"        url: pm.variables.get('base_url') + '/api/' + pm.variables.get('api_version') + '/csrf-token',",
					"        method: 'GET',",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"            'Accept': 'application/json'",
					"        }",
					"    }, function (err, response) {",
					"        if (err) {",
					"            console.log('‚ùå Error fetching CSRF token:', err);",
					"        } else if (response.json() && response.json().csrf_token) {",
					"            pm.globals.set('csrf_token', response.json().csrf_token);",
					"            console.log('‚úÖ CSRF token auto-fetched');",
					"        }",
					"    });",
					"}",
					"",
					"// Check authentication status",
					"if (!pm.globals.get('auth_token') || pm.globals.get('auth_token') === '') {",
					"    console.log('‚ö†Ô∏è No authentication token found. Please login first.');",
					"}",
					"",
					"// Set dynamic timestamps for requests",
					"pm.globals.set('timestamp', new Date().toISOString());",
					"pm.globals.set('unix_timestamp', Math.floor(Date.now() / 1000));",
					"",
					"// Generate random demo data for testing",
					"pm.globals.set('random_x', (Math.random() * 8 - 4).toFixed(2));",
					"pm.globals.set('random_y', (1 + Math.random() * 2).toFixed(2));",
					"pm.globals.set('random_z', (Math.random() * 6 - 3).toFixed(2));",
					"",
					"// Set demo memory content",
					"const demoContents = [",
					"    'Project meeting about Q4 goals',",
					"    'Vacation photos from Italy',",
					"    'Call with mom about birthday plans',",
					"    'Important presentation slides',",
					"    'Weekend hiking adventure'",
					"];",
					"pm.globals.set('demo_content', demoContents[Math.floor(Math.random() * demoContents.length)]);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ee09e59a-dfce-4514-8c54-b9f2d1759726",
				"type": "text/javascript",
				"requests": {},
				"exec": [
					"// Handle authentication errors",
					"if (pm.response.code === 401) {",
					"    console.log('üîí Authentication required. Please login first.');",
					"    pm.test('Authentication Error', function () {",
					"        pm.expect.fail('Please login first using the Authentication > Login request');",
					"    });",
					"    return;",
					"}",
					"",
					"// Handle CSRF token errors",
					"if (pm.response.code === 419) {",
					"    console.log('üîÑ CSRF token expired. Refreshing...');",
					"    pm.test('CSRF Token Expired', function () {",
					"        pm.expect.fail('CSRF token expired. Please run Authentication > Get CSRF Token first');",
					"    });",
					"    return;",
					"}",
					"",
					"// Test that responses are properly formatted",
					"pm.test('Response status is successful', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
					"});",
					"",
					"// Only test JSON format if response has content",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test('Response has valid JSON format', function () {",
					"        pm.expect(() => pm.response.json()).to.not.throw();",
					"    });",
					"}",
					"",
					"// Auto-save important response data",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    try {",
					"        const responseJson = pm.response.json();",
					"        ",
					"        // Save connection ID from connection creation",
					"        if (responseJson.connection && responseJson.connection.id) {",
					"            pm.globals.set('connection_id', responseJson.connection.id.toString());",
					"            console.log('üíæ Connection ID saved:', responseJson.connection.id);",
					"        }",
					"        ",
					"        // Save memory ID from memory creation",
					"        if (responseJson.memory && responseJson.memory.id) {",
					"            pm.globals.set('memory_id', responseJson.memory.id.toString());",
					"            console.log('üíæ Memory ID saved:', responseJson.memory.id);",
					"        }",
					"        ",
					"        // Save room ID from room creation",
					"        if (responseJson.room && responseJson.room.id) {",
					"            pm.globals.set('room_id', responseJson.room.id.toString());",
					"            console.log('üíæ Room ID saved:', responseJson.room.id);",
					"        }",
					"    } catch (e) {",
					"        // Not JSON response, skip",
					"    }",
					"}",
					"",
					"// Log response for debugging (limited to avoid clutter)",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error Response:', pm.response.text());",
					"} else {",
					"    console.log('‚úÖ Request successful (' + pm.response.code + ')');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"description": "Base URL for Memory Palace API (Laravel local server)"
		},
		{
			"key": "api_version",
			"value": "v1",
			"description": "API version (now properly prefixed in routes)"
		},
		{
			"key": "user_id",
			"value": "2",
			"description": "Demo user ID (auto-updated after login)"
		},
		{
			"key": "connection_id",
			"value": "1",
			"description": "API connection ID (auto-updated after connection creation)"
		},
		{
			"key": "memory_id",
			"value": "1",
			"description": "Sample memory ID (auto-updated after memory creation)"
		},
		{
			"key": "room_id",
			"value": "1",
			"description": "Palace room ID (auto-updated after room creation)"
		},
		{
			"key": "csrf_token",
			"value": "",
			"description": "NOT NEEDED for API routes (only for web routes)"
		},
		{
			"key": "auth_token",
			"value": "",
			"description": "Bearer token for authentication (auto-saved after login)"
		},
		{
			"key": "token_type",
			"value": "Bearer",
			"description": "Token type (usually Bearer)"
		},
		{
			"key": "login_email",
			"value": "simiyusamuel869@gmail.com",
			"description": "Email for login (update with your credentials)"
		},
		{
			"key": "login_password",
			"value": "password",
			"description": "Password for login (update with your credentials)"
		},
		{
			"key": "register_name",
			"value": "Test User",
			"description": "Name for registration"
		},
		{
			"key": "register_email",
			"value": "test@example.com",
			"description": "Email for registration"
		},
		{
			"key": "register_password",
			"value": "password123",
			"description": "Password for registration"
		},
		{
			"key": "user_email",
			"value": "",
			"description": "Current user email (auto-saved after login)"
		}
	]
}